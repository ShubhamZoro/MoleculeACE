# If 'Best' is on the left side of the plot, mirror everything. Makes it easer to compare with the previous plots
if (subset(bi_all, algorithm == 'Best')$x < 0){
bi_all$x = bi_all$x*-1
# bi_all$y = bi_all$y*-1
}
# Get the coordinates of 'best' and 'worst' and find the best axis limit
best = unlist(subset(bi_all, algorithm == 'Best')[c(2,3)])
worst = unlist(subset(bi_all, algorithm == 'Worst')[c(2,3)])
axis_limit = ceiling(max(abs(subset(bi_all, type == 'Score')[c(2,3)])))
# Make the actual plot
pca_plot = ggplot(bi_all, aes(x = x, y =y)) +
geom_hline(yintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_vline(xintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_segment(aes(x = worst[1], y = worst[2], xend = best[1], yend = best[2]),
linetype='solid',  alpha = 0.005, size=0.75)+
geom_point(aes(x, y ), colour = bi_all$col,  size = 1.5, shape=1,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_point(aes(x, y ), colour = bi_all$col,  size = 1.5, shape=19,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_text_repel(aes(label = algorithm), colour = bi_all$col,
alpha = ifelse(bi_all$type == 'Score', 1, 0),
size = 4,
segment.size = 0.25, force = 10,
size=12, fontface="bold", max.iter = 1505,
max.overlaps = 30, show.legend = FALSE)+
# scale_y_continuous(limits = c(-axis_limit, axis_limit))+
# scale_x_continuous(limits = c(-axis_limit, axis_limit))+
scale_y_continuous(limits = c(-3, 3), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
scale_x_continuous(limits = c(-3, 3), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
coord_cartesian(ylim=c(-2, 2), xlim=c(-2.5, 2.5))+
labs(x = paste0('PC ',1, ' (',round(pca_all$scree$data$eig[1],1),'%)'),
y = paste0('PC ',2, ' (',round(pca_all$scree$data$eig[2],1),'%)'),
shape = 'Algorithm',  color = 'Descriptor') +
guides(color = guide_legend(override.aes = list(shape = 16), order = 1 )) +
default_theme
print(pca_plot)
# dev.print(pdf, 'DL_pca_poster.pdf', width = 4.5, height = 4.5)
worst
# Make the actual plot
pca_plot = ggplot(bi_all, aes(x = x, y =y)) +
geom_hline(yintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_vline(xintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_segment(aes(x = worst[1], y = worst[2], xend = best[1], yend = best[2]),
linetype='solid',  alpha = 0.005, size=0.75)+
geom_point(aes(x, y ), colour = bi_all$col,  size = 1.5, shape=1,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_point(aes(x, y ), colour = bi_all$col,  size = 1.5, shape=19,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_text_repel(aes(label = algorithm), colour = bi_all$col,
alpha = ifelse(bi_all$type == 'Score', 1, 0),
size = 4,
segment.size = 0.25, force = 10,
size=12, fontface="bold", max.iter = 1505,
max.overlaps = 30, show.legend = FALSE)+
# scale_y_continuous(limits = c(-axis_limit, axis_limit))+
# scale_x_continuous(limits = c(-axis_limit, axis_limit))+
scale_y_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
scale_x_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
coord_cartesian(ylim=c(-2.25, 2.25), xlim=c(-3.25, 3.25))+
labs(x = paste0('PC ',1, ' (',round(pca_all$scree$data$eig[1],1),'%)'),
y = paste0('PC ',2, ' (',round(pca_all$scree$data$eig[2],1),'%)'),
shape = 'Algorithm',  color = 'Descriptor') +
guides(color = guide_legend(override.aes = list(shape = 16), order = 1 )) +
default_theme
print(pca_plot)
# Make the actual plot
pca_plot = ggplot(bi_all, aes(x = x, y =y)) +
geom_hline(yintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_vline(xintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_segment(aes(x = worst[1], y = worst[2], xend = best[1], yend = best[2]),
linetype='solid',  alpha = 0.005, size=0.75)+
geom_point(aes(x, y ), colour = bi_all$col,  size = 1, shape=1,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_point(aes(x, y ), colour = bi_all$col,  size = 1, shape=19,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_text_repel(aes(label = algorithm), colour = bi_all$col,
alpha = ifelse(bi_all$type == 'Score', 1, 0),
size = 3,
segment.size = 0.25, force = 10,
size=12, fontface="bold", max.iter = 1505,
max.overlaps = 30, show.legend = FALSE)+
# scale_y_continuous(limits = c(-axis_limit, axis_limit))+
# scale_x_continuous(limits = c(-axis_limit, axis_limit))+
scale_y_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
scale_x_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
coord_cartesian(ylim=c(-2.25, 2.25), xlim=c(-3.25, 3.25))+
labs(x = paste0('PC ',1, ' (',round(pca_all$scree$data$eig[1],1),'%)'),
y = paste0('PC ',2, ' (',round(pca_all$scree$data$eig[2],1),'%)'),
shape = 'Algorithm',  color = 'Descriptor') +
guides(color = guide_legend(override.aes = list(shape = 16), order = 1 )) +
default_theme
print(pca_plot)
# dev.print(pdf, 'DL_pca_poster.pdf', width = 4.5, height = 4.5)
###### Scatter plots ######
benchmark_scatter = benchmark_dl
# benchmark_scatter = subset(benchmark, algorithm)
benchmark_scatter$descriptor = factor(benchmark_scatter$descriptor, levels = c('ECFP', 'SMILES', 'Graph'))
benchmark_scatter$algorithm = factor(benchmark_scatter$algorithm, levels = c('GCN', 'LSTM', 'MLP', 'SVM', 'AFP', 'CNN', 'GAT', 'MPNN'))
gat_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="GAT", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = bquote("RMSE"[cliff])) +
scale_color_manual(values = c(rep('#b6b6b6', 6), descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 1)))+
default_theme +
theme(legend.position = 'none')
mpnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="MPNN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(rep('#b6b6b6', 7), descr_cols$cols[which(descr_cols$descr == 'Graph')]))+
default_theme +
theme(legend.position = 'none')
afp_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="AFP", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(rep('#b6b6b6', 4), descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 3)))+
default_theme +
theme(legend.position = 'none')
gcn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="GCN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 7)))+
default_theme +
theme(legend.position = 'none')
cnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="CNN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = bquote("RMSE"[cliff])) +
scale_color_manual(values = c(rep('#b6b6b6', 5), descr_cols$cols[which(descr_cols$descr == 'SMILES')], rep('#b6b6b6', 2)))+
default_theme +
theme(legend.position = 'none')
lstm_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="LSTM", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'SMILES')], rep('#b6b6b6', 6)))+
default_theme +
theme(legend.position = 'none')
dnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="MLP", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', '#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'ECFP')], rep('#b6b6b6', 5)))+
default_theme +
theme(legend.position = 'none')
svm_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="SVM", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', '#b6b6b6', '#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'ECFP')], rep('#b6b6b6', 4)))+
default_theme +
theme(legend.position = 'none')
box_pca = plot_grid(box_plot, pca_plot, labels = c('a', 'b'), label_size=10, ncol=2, nrow=1, scale=1)
# scatters = plot_grid(gcn_relative_plot, lstm_relative_plot, dnn_relative_plot, svm_relative_plot, ncol=4, nrow =1, scale = 1)
# fig = plot_grid(box_pca, scatters, ncol=1, nrow =2, scale = 1, rel_heights=c(0.666, 0.333), labels = c('', 'c'), label_size = 20)
scatters = plot_grid(gat_relative_plot, mpnn_relative_plot, afp_relative_plot, gcn_relative_plot,
cnn_relative_plot, lstm_relative_plot, dnn_relative_plot, svm_relative_plot,
ncol=4, nrow=2, scale=1)
fig = plot_grid(box_pca, scatters, ncol=1, nrow =2, scale = 1, rel_heights=c(0.5, 0.6), labels = c('', 'c'), label_size = 10)
print(fig)
dev.print(pdf, 'Fig_4.pdf', width = 9, height = 8)
getwd()
dev.print(pdf, 'Fig_4.pdf', width = 7.205, height = 6)
default_theme = theme(
panel.border = element_rect(colour = "black", size = 1, fill = NA),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face = "plain"),
# axis.ticks.y = element_blank(),
axis.text.y = element_text(size=8, face="plain", colour = "black"),
axis.text.x = element_text(size=8, face="plain", colour = "black"),
axis.title.x = element_text(size=8, face="plain", colour = "black"),
axis.title.y = element_text(size=8, face="plain", colour = "black"),
legend.key = element_blank(),
legend.position = 'bottom', legend.box = "vertical",
legend.title = element_blank(),
legend.background = element_blank(),
panel.grid.major = element_line(colour = "white"),
panel.grid.minor = element_line(colour = "white"))
# ECFP4 SMILES Graph
colours = descr_cols$cols[match(c('ECFP', 'SMILES', 'Graph'), descr_cols$descr)]
box_plot = ggplot(benchmark_box, aes(x=algorithm, y=cliff_rmse, fill=descriptor))+
geom_jitter(aes(color=descriptor), position=position_jitterdodge(0),
size=1, shape=1, alpha=0.5) +
geom_jitter(aes(color=descriptor), position=position_jitterdodge(0),
size=1, shape=19, alpha=0.5) +
geom_boxplot(alpha=0.1, outlier.size = 0, position = position_dodge(0.75), width = 0.25,
outlier.shape=NA, varwidth = FALSE, lwd=0.6, fatten=1) +
scale_y_continuous(breaks = seq(0,3,0.25),
expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.00', '', '0.50', '', '1.00', '', '1.50', '', '2.00', '', '2.50', '', '3.00'))+
coord_cartesian(ylim=c(0, 3))+
scale_color_manual(values = colours)+
scale_fill_manual(values = colours)+
labs(x='Algorithm', y=bquote("RMSE"[cliff]))+
guides(fill = 'none',
color = 'none')+
default_theme
print(box_plot)
# dev.print(pdf, 'DL_box_pca_scatter_poster.pdf', width = 4.5, height = 3.5)
####### PCA ########
# Remove GAT. It is so bad that the whole plot shifts and becomes unreadable
benchmark_pca = subset(benchmark_dl, algorithm != 'GAT')
benchmark_pca = subset(benchmark_dl, dataset %in% unique(benchmark_dl$dataset[benchmark_dl$descriptor == 'Graph']))
pca_all = data_to_biplot(benchmark_pca, val_var="cliff_rmse")
bi_all = pca_all$bi
bi_all$algorithm = unlist(strsplit(as.character(bi_all$name), ' - '))[2*(1:length(bi_all$name))-1 ]
bi_all$descriptor = unlist(strsplit(as.character(bi_all$name), ' - '))[2*(1:length(bi_all$name)) ]
bi_all$algorithm[grepl('CHEMBL', bi_all$name)] = ''
bi_all$descriptor[grepl('CHEMBL', bi_all$name)] = ''
# rename some stuff
bi_all$algorithm = gsub('Svm', 'SVM', bi_all$algorithm)
bi_all$algorithm = gsub('Knn', 'KNN', bi_all$algorithm)
bi_all$algorithm = gsub('Cnn', 'CNN', bi_all$algorithm)
bi_all$algorithm = gsub('Dnn', 'MLP', bi_all$algorithm)
bi_all$algorithm = gsub('Lstm', 'LSTM', bi_all$algorithm)
bi_all$algorithm = gsub('Afp', 'AFP', bi_all$algorithm)
bi_all$algorithm = gsub('Gat', 'GAT', bi_all$algorithm)
bi_all$algorithm =  gsub('Gcn', 'GCN', bi_all$algorithm)
bi_all$algorithm =  gsub('Mpnn', 'MPNN', bi_all$algorithm)
bi_all$descriptor =  gsub('ecfp', 'ECFP', bi_all$descriptor)
bi_all$descriptor =  gsub('graph', 'Graph', bi_all$descriptor)
bi_all$descriptor =  gsub('smiles', 'SMILES', bi_all$descriptor)
# Define the colours for the descriptors
bi_all$col = descr_cols$cols[match(bi_all$descriptor, descr_cols$descr)]
# If 'Best' is on the left side of the plot, mirror everything. Makes it easer to compare with the previous plots
if (subset(bi_all, algorithm == 'Best')$x < 0){
bi_all$x = bi_all$x*-1
# bi_all$y = bi_all$y*-1
}
# Get the coordinates of 'best' and 'worst' and find the best axis limit
best = unlist(subset(bi_all, algorithm == 'Best')[c(2,3)])
worst = unlist(subset(bi_all, algorithm == 'Worst')[c(2,3)])
axis_limit = ceiling(max(abs(subset(bi_all, type == 'Score')[c(2,3)])))
# Make the actual plot
pca_plot = ggplot(bi_all, aes(x = x, y =y)) +
geom_hline(yintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_vline(xintercept = 0, linetype = 'dashed', alpha = 0.25) +
geom_segment(aes(x = worst[1], y = worst[2], xend = best[1], yend = best[2]),
linetype='solid',  alpha = 0.005, size=0.75)+
geom_point(aes(x, y ), colour = bi_all$col,  size = 1, shape=1,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_point(aes(x, y ), colour = bi_all$col,  size = 1, shape=19,
alpha = ifelse(bi_all$type == 'Score', 0.5, 0)) +
geom_text_repel(aes(label = algorithm), colour = bi_all$col,
alpha = ifelse(bi_all$type == 'Score', 1, 0),
size = 3,
segment.size = 0.25, force = 10,
size=12, fontface="bold", max.iter = 1505,
max.overlaps = 30, show.legend = FALSE)+
# scale_y_continuous(limits = c(-axis_limit, axis_limit))+
# scale_x_continuous(limits = c(-axis_limit, axis_limit))+
scale_y_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
scale_x_continuous(limits = c(-3.25, 3.25), expand = expansion(mult = c(0.01, 0.01)), breaks = seq(-3,3,1))+
coord_cartesian(ylim=c(-2.25, 2.25), xlim=c(-3.25, 3.25))+
labs(x = paste0('PC ',1, ' (',round(pca_all$scree$data$eig[1],1),'%)'),
y = paste0('PC ',2, ' (',round(pca_all$scree$data$eig[2],1),'%)'),
shape = 'Algorithm',  color = 'Descriptor') +
guides(color = guide_legend(override.aes = list(shape = 16), order = 1 )) +
default_theme
print(pca_plot)
# dev.print(pdf, 'DL_pca_poster.pdf', width = 4.5, height = 4.5)
###### Scatter plots ######
benchmark_scatter = benchmark_dl
# benchmark_scatter = subset(benchmark, algorithm)
benchmark_scatter$descriptor = factor(benchmark_scatter$descriptor, levels = c('ECFP', 'SMILES', 'Graph'))
benchmark_scatter$algorithm = factor(benchmark_scatter$algorithm, levels = c('GCN', 'LSTM', 'MLP', 'SVM', 'AFP', 'CNN', 'GAT', 'MPNN'))
gat_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GAT', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="GAT", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = bquote("RMSE"[cliff])) +
scale_color_manual(values = c(rep('#b6b6b6', 6), descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 1)))+
default_theme +
theme(legend.position = 'none')
mpnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MPNN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="MPNN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(rep('#b6b6b6', 7), descr_cols$cols[which(descr_cols$descr == 'Graph')]))+
default_theme +
theme(legend.position = 'none')
afp_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'AFP', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="AFP", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(rep('#b6b6b6', 4), descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 3)))+
default_theme +
theme(legend.position = 'none')
gcn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'GCN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="GCN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = '',  y = '') +
scale_color_manual(values = c(descr_cols$cols[which(descr_cols$descr == 'Graph')], rep('#b6b6b6', 7)))+
default_theme +
theme(legend.position = 'none')
cnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'CNN', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="CNN", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = bquote("RMSE"[cliff])) +
scale_color_manual(values = c(rep('#b6b6b6', 5), descr_cols$cols[which(descr_cols$descr == 'SMILES')], rep('#b6b6b6', 2)))+
default_theme +
theme(legend.position = 'none')
lstm_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'LSTM', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="LSTM", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'SMILES')], rep('#b6b6b6', 6)))+
default_theme +
theme(legend.position = 'none')
dnn_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'MLP', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="MLP", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', '#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'ECFP')], rep('#b6b6b6', 5)))+
default_theme +
theme(legend.position = 'none')
svm_relative_plot = ggplot(benchmark_scatter, aes(x=rmse, y=cliff_rmse, colour=algorithm))+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0, 0.2), shape=19, size=1, color='#b6b6b6' )+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0.5, 0), shape=1, size=1)+
geom_point(alpha = ifelse(benchmark_scatter$algorithm == 'SVM', 0.5, 0), shape=19, size=1)+
geom_abline(slope=1, intercept = 0, linetype='dashed', alpha=0.75)+
geom_abline(slope=1, intercept = 0.25, linetype='dashed', alpha=0.25)+
geom_abline(slope=1, intercept = -0.25, linetype='dashed', alpha=0.25)+
geom_text(x=0.25, y=2.75, label="SVM", color = 'black', size=3.5, fontface="bold", hjust=0) +
scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
scale_y_continuous(breaks = seq(0,3,0.5), limits = c(0.01,3), expand = expansion(mult = c(0.01, 0.01)),
labels = c('0.0', '', '1.0', '', '2.0','', '3.0')) +
labs(x = 'RMSE',  y = '') +
scale_color_manual(values = c('#b6b6b6', '#b6b6b6', '#b6b6b6', descr_cols$cols[which(descr_cols$descr == 'ECFP')], rep('#b6b6b6', 4)))+
default_theme +
theme(legend.position = 'none')
##### Combine subplots ######
box_pca = plot_grid(box_plot, pca_plot, labels = c('a', 'b'), label_size=10, ncol=2, nrow=1, scale=1)
# scatters = plot_grid(gcn_relative_plot, lstm_relative_plot, dnn_relative_plot, svm_relative_plot, ncol=4, nrow =1, scale = 1)
# fig = plot_grid(box_pca, scatters, ncol=1, nrow =2, scale = 1, rel_heights=c(0.666, 0.333), labels = c('', 'c'), label_size = 20)
scatters = plot_grid(gat_relative_plot, mpnn_relative_plot, afp_relative_plot, gcn_relative_plot,
cnn_relative_plot, lstm_relative_plot, dnn_relative_plot, svm_relative_plot,
ncol=4, nrow=2, scale=1)
fig = plot_grid(box_pca, scatters, ncol=1, nrow =2, scale = 1, rel_heights=c(0.5, 0.6), labels = c('', 'c'), label_size = 10)
print(fig)
dev.print(pdf, 'Fig_4.pdf', width = 7.205, height = 6)
library(readr)
library(plyr)
library(dplyr)
benchmark <- read_csv("Dropbox/PycharmProjects/Activity_cliffs/Results/Benchmark_results.csv")
target_info = read_csv("Dropbox/PycharmProjects/Activity_cliffs/Data/metadata/dataset_info.csv")
benchmark = benchmark %>% group_by(dataset) %>% summarise_all("mean")
benchmark$target = target_info$Class[match(benchmark$dataset, target_info$Dataset)]
benchmark$name = target_info$Name[match(benchmark$dataset, target_info$Dataset)]
benchmark$target = gsub('G_Protein_Coupled_Receptor', 'GPCR', benchmark$target)
benchmark$target = gsub('Nuclear_receptor', 'NR', benchmark$target)
# Name Class label CHEMBL_id cpds_train cpds_test cliff_cpds_train cliff_cpds_test
new_df = benchmark[c('name', 'target', 'dataset', 'dataset', "n_compounds_train", "n_compounds_test", "n_soft_consensus_cliff_compounds_train", "n_soft_consensus_cliff_compounds_test")]
names(new_df) = c('Name', 'Type', 'Label', 'ChEMBL id', 'Train compounds', 'Test compounds', 'Train activity cliff compounds', 'Test activity cliff compounds')
new_df$Label = gsub(".*_", "", new_df$Label)
new_df$`ChEMBL id` = gsub("_.*", "", new_df$`ChEMBL id`)
new_df$`ChEMBL id` = gsub("H", "h", new_df$`ChEMBL id`)
new_df = new_df[order(new_df$`Train compounds`, decreasing = T),]
write_csv(new_df, 'Table_1.csv')
benchmark <- read_csv("/home/dwvtilborg/Dropbox/PycharmProjects/Activity_cliffs/Results/Benchmark_results.csv")
target_info = read_csv("/home/dwvtilborg/Dropbox/PycharmProjects/Activity_cliffs/Data/metadata/dataset_info.csv")
benchmark = benchmark %>% group_by(dataset) %>% summarise_all("mean")
benchmark$target = target_info$Class[match(benchmark$dataset, target_info$Dataset)]
benchmark$name = target_info$Name[match(benchmark$dataset, target_info$Dataset)]
benchmark$target = gsub('G_Protein_Coupled_Receptor', 'GPCR', benchmark$target)
benchmark$target = gsub('Nuclear_receptor', 'NR', benchmark$target)
# Name Class label CHEMBL_id cpds_train cpds_test cliff_cpds_train cliff_cpds_test
new_df = benchmark[c('name', 'target', 'dataset', 'dataset', "n_compounds_train", "n_compounds_test", "n_soft_consensus_cliff_compounds_train", "n_soft_consensus_cliff_compounds_test")]
names(new_df) = c('Name', 'Type', 'Label', 'ChEMBL id', 'Train compounds', 'Test compounds', 'Train activity cliff compounds', 'Test activity cliff compounds')
new_df$Label = gsub(".*_", "", new_df$Label)
new_df$`ChEMBL id` = gsub("_.*", "", new_df$`ChEMBL id`)
new_df$`ChEMBL id` = gsub("H", "h", new_df$`ChEMBL id`)
new_df = new_df[order(new_df$`Train compounds`, decreasing = T),]
new_df
write_csv(new_df, 'Table_1.csv')
